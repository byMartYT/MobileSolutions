/* tslint:disable */
/* eslint-disable */
/**
 * MobileSolutions API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * Todo model representing a collection of todo items with associated metadata.
 * @export
 * @interface Todo
 */
export interface Todo {
    /**
     * Title of the todo collection
     * @type {string}
     * @memberof Todo
     */
    'title': string;
    /**
     * User ID associated with the todo
     * @type {string}
     * @memberof Todo
     */
    'user': string;
    /**
     * Icon identifier for the todo
     * @type {string}
     * @memberof Todo
     */
    'icon': string;
    /**
     * Color code for styling the todo
     * @type {string}
     * @memberof Todo
     */
    'color': string;
    /**
     * Text color code for styling
     * @type {string}
     * @memberof Todo
     */
    'textColor': string;
    /**
     * Helpful tip or description
     * @type {string}
     * @memberof Todo
     */
    'tip': string;
    /**
     * Goal or objective of the todo collection
     * @type {string}
     * @memberof Todo
     */
    'goal': string;
    /**
     * List of todo items
     * @type {Array<TodoItem>}
     * @memberof Todo
     */
    'todos': Array<TodoItem>;
    /**
     * 
     * @type {string}
     * @memberof Todo
     */
    'id'?: string | null;
}
/**
 * Todo item model representing individual tasks within a Todo list.
 * @export
 * @interface TodoItem
 */
export interface TodoItem {
    /**
     * Status of the todo item (completed or not)
     * @type {boolean}
     * @memberof TodoItem
     */
    'status': boolean;
    /**
     * Content text of the todo item
     * @type {string}
     * @memberof TodoItem
     */
    'text': string;
}
/**
 * Todo patch model for partial updates of todo items. All fields are optional to allow for partial updates.
 * @export
 * @interface TodoPatch
 */
export interface TodoPatch {
    /**
     * 
     * @type {string}
     * @memberof TodoPatch
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TodoPatch
     */
    'user'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TodoPatch
     */
    'icon'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TodoPatch
     */
    'color'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TodoPatch
     */
    'textColor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TodoPatch
     */
    'tip'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TodoPatch
     */
    'goal'?: string | null;
    /**
     * 
     * @type {Array<TodoItem>}
     * @memberof TodoPatch
     */
    'todos'?: Array<TodoItem> | null;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Db Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbTestApiV1DbTestGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/db-test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiV1HealthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRootApiV1Get: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Db Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dbTestApiV1DbTestGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dbTestApiV1DbTestGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.dbTestApiV1DbTestGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckApiV1HealthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckApiV1HealthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.healthCheckApiV1HealthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readRootApiV1Get(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readRootApiV1Get(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readRootApiV1Get']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Db Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbTestApiV1DbTestGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.dbTestApiV1DbTestGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiV1HealthGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.healthCheckApiV1HealthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRootApiV1Get(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.readRootApiV1Get(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Db Test
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public dbTestApiV1DbTestGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).dbTestApiV1DbTestGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthCheckApiV1HealthGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthCheckApiV1HealthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readRootApiV1Get(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readRootApiV1Get(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TodosApi - axios parameter creator
 * @export
 */
export const TodosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new todo list
         * @summary Create Todo
         * @param {Todo} todo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTodoApiV1TodosPost: async (todo: Todo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todo' is not null or undefined
            assertParamExists('createTodoApiV1TodosPost', 'todo', todo)
            const localVarPath = `/api/v1/todos/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(todo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a todo list by ID
         * @summary Delete Todo
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodoApiV1TodosTodoIdDelete: async (todoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('deleteTodoApiV1TodosTodoIdDelete', 'todoId', todoId)
            const localVarPath = `/api/v1/todos/{todo_id}`
                .replace(`{${"todo_id"}}`, encodeURIComponent(String(todoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific todo list by ID
         * @summary Get Todo
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoApiV1TodosTodoIdGet: async (todoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('getTodoApiV1TodosTodoIdGet', 'todoId', todoId)
            const localVarPath = `/api/v1/todos/{todo_id}`
                .replace(`{${"todo_id"}}`, encodeURIComponent(String(todoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all todo lists with pagination
         * @summary Get Todos
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodosApiV1TodosGet: async (skip?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/todos/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially update a todo list by ID - only update the fields that are provided
         * @summary Partial Update Todo
         * @param {string} todoId 
         * @param {TodoPatch} todoPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateTodoApiV1TodosTodoIdPatch: async (todoId: string, todoPatch: TodoPatch, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('partialUpdateTodoApiV1TodosTodoIdPatch', 'todoId', todoId)
            // verify required parameter 'todoPatch' is not null or undefined
            assertParamExists('partialUpdateTodoApiV1TodosTodoIdPatch', 'todoPatch', todoPatch)
            const localVarPath = `/api/v1/todos/{todo_id}`
                .replace(`{${"todo_id"}}`, encodeURIComponent(String(todoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(todoPatch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a todo list by ID
         * @summary Update Todo
         * @param {string} todoId 
         * @param {Todo} todo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTodoApiV1TodosTodoIdPut: async (todoId: string, todo: Todo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('updateTodoApiV1TodosTodoIdPut', 'todoId', todoId)
            // verify required parameter 'todo' is not null or undefined
            assertParamExists('updateTodoApiV1TodosTodoIdPut', 'todo', todo)
            const localVarPath = `/api/v1/todos/{todo_id}`
                .replace(`{${"todo_id"}}`, encodeURIComponent(String(todoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(todo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TodosApi - functional programming interface
 * @export
 */
export const TodosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TodosApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new todo list
         * @summary Create Todo
         * @param {Todo} todo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTodoApiV1TodosPost(todo: Todo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTodoApiV1TodosPost(todo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodosApi.createTodoApiV1TodosPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a todo list by ID
         * @summary Delete Todo
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTodoApiV1TodosTodoIdDelete(todoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTodoApiV1TodosTodoIdDelete(todoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodosApi.deleteTodoApiV1TodosTodoIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific todo list by ID
         * @summary Get Todo
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTodoApiV1TodosTodoIdGet(todoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTodoApiV1TodosTodoIdGet(todoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodosApi.getTodoApiV1TodosTodoIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all todo lists with pagination
         * @summary Get Todos
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTodosApiV1TodosGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Todo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTodosApiV1TodosGet(skip, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodosApi.getTodosApiV1TodosGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Partially update a todo list by ID - only update the fields that are provided
         * @summary Partial Update Todo
         * @param {string} todoId 
         * @param {TodoPatch} todoPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateTodoApiV1TodosTodoIdPatch(todoId: string, todoPatch: TodoPatch, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateTodoApiV1TodosTodoIdPatch(todoId, todoPatch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodosApi.partialUpdateTodoApiV1TodosTodoIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a todo list by ID
         * @summary Update Todo
         * @param {string} todoId 
         * @param {Todo} todo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTodoApiV1TodosTodoIdPut(todoId: string, todo: Todo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTodoApiV1TodosTodoIdPut(todoId, todo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodosApi.updateTodoApiV1TodosTodoIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TodosApi - factory interface
 * @export
 */
export const TodosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TodosApiFp(configuration)
    return {
        /**
         * Create a new todo list
         * @summary Create Todo
         * @param {Todo} todo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTodoApiV1TodosPost(todo: Todo, options?: RawAxiosRequestConfig): AxiosPromise<Todo> {
            return localVarFp.createTodoApiV1TodosPost(todo, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a todo list by ID
         * @summary Delete Todo
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodoApiV1TodosTodoIdDelete(todoId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTodoApiV1TodosTodoIdDelete(todoId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific todo list by ID
         * @summary Get Todo
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoApiV1TodosTodoIdGet(todoId: string, options?: RawAxiosRequestConfig): AxiosPromise<Todo> {
            return localVarFp.getTodoApiV1TodosTodoIdGet(todoId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all todo lists with pagination
         * @summary Get Todos
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodosApiV1TodosGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Todo>> {
            return localVarFp.getTodosApiV1TodosGet(skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially update a todo list by ID - only update the fields that are provided
         * @summary Partial Update Todo
         * @param {string} todoId 
         * @param {TodoPatch} todoPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateTodoApiV1TodosTodoIdPatch(todoId: string, todoPatch: TodoPatch, options?: RawAxiosRequestConfig): AxiosPromise<Todo> {
            return localVarFp.partialUpdateTodoApiV1TodosTodoIdPatch(todoId, todoPatch, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a todo list by ID
         * @summary Update Todo
         * @param {string} todoId 
         * @param {Todo} todo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTodoApiV1TodosTodoIdPut(todoId: string, todo: Todo, options?: RawAxiosRequestConfig): AxiosPromise<Todo> {
            return localVarFp.updateTodoApiV1TodosTodoIdPut(todoId, todo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TodosApi - object-oriented interface
 * @export
 * @class TodosApi
 * @extends {BaseAPI}
 */
export class TodosApi extends BaseAPI {
    /**
     * Create a new todo list
     * @summary Create Todo
     * @param {Todo} todo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public createTodoApiV1TodosPost(todo: Todo, options?: RawAxiosRequestConfig) {
        return TodosApiFp(this.configuration).createTodoApiV1TodosPost(todo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a todo list by ID
     * @summary Delete Todo
     * @param {string} todoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public deleteTodoApiV1TodosTodoIdDelete(todoId: string, options?: RawAxiosRequestConfig) {
        return TodosApiFp(this.configuration).deleteTodoApiV1TodosTodoIdDelete(todoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific todo list by ID
     * @summary Get Todo
     * @param {string} todoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public getTodoApiV1TodosTodoIdGet(todoId: string, options?: RawAxiosRequestConfig) {
        return TodosApiFp(this.configuration).getTodoApiV1TodosTodoIdGet(todoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all todo lists with pagination
     * @summary Get Todos
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public getTodosApiV1TodosGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return TodosApiFp(this.configuration).getTodosApiV1TodosGet(skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially update a todo list by ID - only update the fields that are provided
     * @summary Partial Update Todo
     * @param {string} todoId 
     * @param {TodoPatch} todoPatch 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public partialUpdateTodoApiV1TodosTodoIdPatch(todoId: string, todoPatch: TodoPatch, options?: RawAxiosRequestConfig) {
        return TodosApiFp(this.configuration).partialUpdateTodoApiV1TodosTodoIdPatch(todoId, todoPatch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a todo list by ID
     * @summary Update Todo
     * @param {string} todoId 
     * @param {Todo} todo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public updateTodoApiV1TodosTodoIdPut(todoId: string, todo: Todo, options?: RawAxiosRequestConfig) {
        return TodosApiFp(this.configuration).updateTodoApiV1TodosTodoIdPut(todoId, todo, options).then((request) => request(this.axios, this.basePath));
    }
}



