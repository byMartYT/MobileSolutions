/* tslint:disable */
/* eslint-disable */
/**
 * MobileSolutions API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export const AchievementCategory = {
    Skill: 'skill',
    Streak: 'streak',
    General: 'general',
    Speed: 'speed',
    Consistency: 'consistency'
} as const;

export type AchievementCategory = typeof AchievementCategory[keyof typeof AchievementCategory];


/**
 * Achievement with user progress.
 * @export
 * @interface AchievementWithProgress
 */
export interface AchievementWithProgress {
    /**
     * Achievement name
     * @type {string}
     * @memberof AchievementWithProgress
     */
    'name': string;
    /**
     * Achievement description
     * @type {string}
     * @memberof AchievementWithProgress
     */
    'description': string;
    /**
     * Achievement icon identifier
     * @type {string}
     * @memberof AchievementWithProgress
     */
    'icon': string;
    /**
     * Achievement category
     * @type {AchievementCategory}
     * @memberof AchievementWithProgress
     */
    'category': AchievementCategory;
    /**
     * Type of condition to unlock
     * @type {ConditionType}
     * @memberof AchievementWithProgress
     */
    'condition_type': ConditionType;
    /**
     * Value needed to unlock
     * @type {number}
     * @memberof AchievementWithProgress
     */
    'condition_value': number;
    /**
     * Points awarded when unlocked
     * @type {number}
     * @memberof AchievementWithProgress
     */
    'points_reward': number;
    /**
     * Whether achievement is hidden until unlocked
     * @type {boolean}
     * @memberof AchievementWithProgress
     */
    'is_hidden'?: boolean;
    /**
     * Creation timestamp
     * @type {string}
     * @memberof AchievementWithProgress
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof AchievementWithProgress
     */
    'id'?: string | null;
    /**
     * Whether user has unlocked this achievement
     * @type {boolean}
     * @memberof AchievementWithProgress
     */
    'is_unlocked': boolean;
    /**
     * Progress towards unlocking (0-100%)
     * @type {number}
     * @memberof AchievementWithProgress
     */
    'progress': number;
    /**
     * 
     * @type {string}
     * @memberof AchievementWithProgress
     */
    'unlocked_at'?: string | null;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const ConditionType = {
    TodoCount: 'todo_count',
    SkillCount: 'skill_count',
    StreakDays: 'streak_days',
    PointsTotal: 'points_total',
    SpeedCompletion: 'speed_completion'
} as const;

export type ConditionType = typeof ConditionType[keyof typeof ConditionType];


/**
 * 
 * @export
 * @interface ConversationContext
 */
export interface ConversationContext {
    /**
     * 
     * @type {string}
     * @memberof ConversationContext
     */
    'domain'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConversationContext
     */
    'goals'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ConversationContext
     */
    'difficulty'?: ConversationContextDifficultyEnum | null;
    /**
     * 
     * @type {string}
     * @memberof ConversationContext
     */
    'timeframe'?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ConversationContext
     */
    'preferences'?: { [key: string]: any; };
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ConversationContext
     */
    'collected_info'?: { [key: string]: any; };
}

export const ConversationContextDifficultyEnum = {
    Beginner: 'beginner',
    Intermediate: 'intermediate',
    Advanced: 'advanced'
} as const;

export type ConversationContextDifficultyEnum = typeof ConversationContextDifficultyEnum[keyof typeof ConversationContextDifficultyEnum];

/**
 * 
 * @export
 * @interface ConversationResponse
 */
export interface ConversationResponse {
    /**
     * 
     * @type {string}
     * @memberof ConversationResponse
     */
    'conversation_id': string;
    /**
     * 
     * @type {string}
     * @memberof ConversationResponse
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ConversationResponse
     */
    'state': string;
    /**
     * 
     * @type {boolean}
     * @memberof ConversationResponse
     */
    'is_complete': boolean;
    /**
     * 
     * @type {string}
     * @memberof ConversationResponse
     */
    'next_question'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ConversationResponse
     */
    'progress_percentage': number;
}
/**
 * 
 * @export
 * @interface ConversationState
 */
export interface ConversationState {
    /**
     * 
     * @type {string}
     * @memberof ConversationState
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ConversationState
     */
    'state': ConversationStateStateEnum;
    /**
     * 
     * @type {ConversationContext}
     * @memberof ConversationState
     */
    'context': ConversationContext;
    /**
     * 
     * @type {Array<Message>}
     * @memberof ConversationState
     */
    'messages': Array<Message>;
    /**
     * 
     * @type {boolean}
     * @memberof ConversationState
     */
    'is_complete'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ConversationState
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof ConversationState
     */
    'updated_at': string;
}

export const ConversationStateStateEnum = {
    Idle: 'idle',
    CollectingDomain: 'collecting_domain',
    CollectingGoals: 'collecting_goals',
    CollectingDifficulty: 'collecting_difficulty',
    CollectingTimeframe: 'collecting_timeframe',
    CollectingPreferences: 'collecting_preferences',
    Generating: 'generating',
    Reviewing: 'reviewing',
    Complete: 'complete'
} as const;

export type ConversationStateStateEnum = typeof ConversationStateStateEnum[keyof typeof ConversationStateStateEnum];

/**
 * Summary of user\'s gamification status.
 * @export
 * @interface GamificationSummary
 */
export interface GamificationSummary {
    /**
     * 
     * @type {UserStatsResponse}
     * @memberof GamificationSummary
     */
    'stats': UserStatsResponse;
    /**
     * Recently unlocked achievements
     * @type {Array<UserAchievement>}
     * @memberof GamificationSummary
     */
    'recent_achievements': Array<UserAchievement>;
    /**
     * Achievements close to unlocking
     * @type {Array<AchievementWithProgress>}
     * @memberof GamificationSummary
     */
    'next_achievements': Array<AchievementWithProgress>;
    /**
     * Recent points activity
     * @type {Array<PointsEntry>}
     * @memberof GamificationSummary
     */
    'recent_points': Array<PointsEntry>;
}
/**
 * 
 * @export
 * @interface GeneratedSkill
 */
export interface GeneratedSkill {
    /**
     * 
     * @type {string}
     * @memberof GeneratedSkill
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof GeneratedSkill
     */
    'goal': string;
    /**
     * 
     * @type {string}
     * @memberof GeneratedSkill
     */
    'color': string;
    /**
     * 
     * @type {string}
     * @memberof GeneratedSkill
     */
    'icon': string;
    /**
     * 
     * @type {string}
     * @memberof GeneratedSkill
     */
    'user'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratedSkill
     */
    'textColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratedSkill
     */
    'tip': string;
    /**
     * 
     * @type {Array<{ [key: string]: any; }>}
     * @memberof GeneratedSkill
     */
    'todos': Array<{ [key: string]: any; }>;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * Level configuration model.
 * @export
 * @interface LevelConfig
 */
export interface LevelConfig {
    /**
     * Level number
     * @type {number}
     * @memberof LevelConfig
     */
    'level': number;
    /**
     * Total points required to reach this level
     * @type {number}
     * @memberof LevelConfig
     */
    'points_required': number;
    /**
     * Level title/name
     * @type {string}
     * @memberof LevelConfig
     */
    'title': string;
    /**
     * Rewards unlocked at this level
     * @type {Array<string>}
     * @memberof LevelConfig
     */
    'rewards'?: Array<string>;
    /**
     * Level color theme
     * @type {string}
     * @memberof LevelConfig
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof LevelConfig
     */
    'id'?: string | null;
}
/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'role': MessageRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'timestamp': string;
}

export const MessageRoleEnum = {
    User: 'user',
    Assistant: 'assistant',
    System: 'system'
} as const;

export type MessageRoleEnum = typeof MessageRoleEnum[keyof typeof MessageRoleEnum];

/**
 * 
 * @export
 * @interface MessageRequest
 */
export interface MessageRequest {
    /**
     * 
     * @type {string}
     * @memberof MessageRequest
     */
    'conversation_id': string;
    /**
     * 
     * @type {string}
     * @memberof MessageRequest
     */
    'message': string;
}
/**
 * Points transaction history model.
 * @export
 * @interface PointsEntry
 */
export interface PointsEntry {
    /**
     * User ID
     * @type {string}
     * @memberof PointsEntry
     */
    'user_id': string;
    /**
     * Points awarded (positive) or deducted (negative)
     * @type {number}
     * @memberof PointsEntry
     */
    'points': number;
    /**
     * Reason for points change
     * @type {PointsReason}
     * @memberof PointsEntry
     */
    'reason': PointsReason;
    /**
     * 
     * @type {string}
     * @memberof PointsEntry
     */
    'reference_id'?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PointsEntry
     */
    'metadata'?: { [key: string]: any; } | null;
    /**
     * Creation timestamp
     * @type {string}
     * @memberof PointsEntry
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PointsEntry
     */
    'id'?: string | null;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const PointsReason = {
    TodoCompleted: 'todo_completed',
    SkillCompleted: 'skill_completed',
    StreakBonus: 'streak_bonus',
    AchievementUnlocked: 'achievement_unlocked',
    DailyLogin: 'daily_login'
} as const;

export type PointsReason = typeof PointsReason[keyof typeof PointsReason];


/**
 * 
 * @export
 * @interface SkillGenerationRequest
 */
export interface SkillGenerationRequest {
    /**
     * 
     * @type {string}
     * @memberof SkillGenerationRequest
     */
    'conversation_id': string;
}
/**
 * 
 * @export
 * @interface SkillGenerationResponse
 */
export interface SkillGenerationResponse {
    /**
     * 
     * @type {boolean}
     * @memberof SkillGenerationResponse
     */
    'success': boolean;
    /**
     * 
     * @type {GeneratedSkill}
     * @memberof SkillGenerationResponse
     */
    'skill'?: GeneratedSkill | null;
    /**
     * 
     * @type {string}
     * @memberof SkillGenerationResponse
     */
    'error'?: string | null;
}
/**
 * Todo model representing a collection of todo items with associated metadata.
 * @export
 * @interface Todo
 */
export interface Todo {
    /**
     * Title of the todo collection
     * @type {string}
     * @memberof Todo
     */
    'title': string;
    /**
     * User ID associated with the todo
     * @type {string}
     * @memberof Todo
     */
    'user': string;
    /**
     * Icon identifier for the todo
     * @type {string}
     * @memberof Todo
     */
    'icon': string;
    /**
     * Color code for styling the todo
     * @type {string}
     * @memberof Todo
     */
    'color': string;
    /**
     * Text color code for styling
     * @type {string}
     * @memberof Todo
     */
    'textColor': string;
    /**
     * Helpful tip or description
     * @type {string}
     * @memberof Todo
     */
    'tip': string;
    /**
     * Goal or objective of the todo collection
     * @type {string}
     * @memberof Todo
     */
    'goal': string;
    /**
     * List of todo items
     * @type {Array<TodoItem>}
     * @memberof Todo
     */
    'todos': Array<TodoItem>;
    /**
     * 
     * @type {string}
     * @memberof Todo
     */
    'id'?: string | null;
}
/**
 * Todo item model representing individual tasks within a Todo list.
 * @export
 * @interface TodoItem
 */
export interface TodoItem {
    /**
     * Status of the todo item (completed or not)
     * @type {boolean}
     * @memberof TodoItem
     */
    'status': boolean;
    /**
     * Content text of the todo item
     * @type {string}
     * @memberof TodoItem
     */
    'text': string;
    /**
     * Id
     * @type {string}
     * @memberof TodoItem
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface TodoItemPatch
 */
export interface TodoItemPatch {
    /**
     * 
     * @type {string}
     * @memberof TodoItemPatch
     */
    'text'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TodoItemPatch
     */
    'status'?: boolean;
}
/**
 * Todo patch model for partial updates of todo items. All fields are optional to allow for partial updates.
 * @export
 * @interface TodoPatch
 */
export interface TodoPatch {
    /**
     * 
     * @type {string}
     * @memberof TodoPatch
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TodoPatch
     */
    'user'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TodoPatch
     */
    'icon'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TodoPatch
     */
    'color'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TodoPatch
     */
    'textColor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TodoPatch
     */
    'tip'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TodoPatch
     */
    'goal'?: string | null;
    /**
     * 
     * @type {Array<TodoItem>}
     * @memberof TodoPatch
     */
    'todos'?: Array<TodoItem> | null;
}
/**
 * User\'s unlocked achievement model.
 * @export
 * @interface UserAchievement
 */
export interface UserAchievement {
    /**
     * User ID
     * @type {string}
     * @memberof UserAchievement
     */
    'user_id': string;
    /**
     * Achievement ID
     * @type {string}
     * @memberof UserAchievement
     */
    'achievement_id': string;
    /**
     * Unlock timestamp
     * @type {string}
     * @memberof UserAchievement
     */
    'unlocked_at'?: string;
    /**
     * Whether user has seen the achievement notification
     * @type {boolean}
     * @memberof UserAchievement
     */
    'is_seen'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserAchievement
     */
    'id'?: string | null;
}
/**
 * User stats with calculated fields.
 * @export
 * @interface UserStatsResponse
 */
export interface UserStatsResponse {
    /**
     * User ID
     * @type {string}
     * @memberof UserStatsResponse
     */
    'user_id': string;
    /**
     * Total accumulated points
     * @type {number}
     * @memberof UserStatsResponse
     */
    'total_points'?: number;
    /**
     * Current user level
     * @type {number}
     * @memberof UserStatsResponse
     */
    'current_level'?: number;
    /**
     * Progress to next level (0-100%)
     * @type {number}
     * @memberof UserStatsResponse
     */
    'current_level_progress'?: number;
    /**
     * Current consecutive days streak
     * @type {number}
     * @memberof UserStatsResponse
     */
    'streak_count'?: number;
    /**
     * Longest streak ever achieved
     * @type {number}
     * @memberof UserStatsResponse
     */
    'longest_streak'?: number;
    /**
     * Last activity date
     * @type {string}
     * @memberof UserStatsResponse
     */
    'last_active_date'?: string;
    /**
     * Total skills completed
     * @type {number}
     * @memberof UserStatsResponse
     */
    'total_skills_completed'?: number;
    /**
     * Total todos completed
     * @type {number}
     * @memberof UserStatsResponse
     */
    'total_todos_completed'?: number;
    /**
     * Creation timestamp
     * @type {string}
     * @memberof UserStatsResponse
     */
    'created_at'?: string;
    /**
     * Last update timestamp
     * @type {string}
     * @memberof UserStatsResponse
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserStatsResponse
     */
    'id'?: string | null;
    /**
     * Points needed for next level
     * @type {number}
     * @memberof UserStatsResponse
     */
    'points_to_next_level': number;
    /**
     * Next level title
     * @type {string}
     * @memberof UserStatsResponse
     */
    'next_level_title': string;
}
/**
 * Model for updating user stats.
 * @export
 * @interface UserStatsUpdate
 */
export interface UserStatsUpdate {
    /**
     * 
     * @type {number}
     * @memberof UserStatsUpdate
     */
    'points_to_add'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UserStatsUpdate
     */
    'todos_completed'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UserStatsUpdate
     */
    'skills_completed'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserStatsUpdate
     */
    'update_streak'?: boolean | null;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * AISkillGeneratorApi - axios parameter creator
 * @export
 */
export const AISkillGeneratorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a conversation
         * @summary Delete Conversation
         * @param {string} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConversationApiV1AiConversationConversationIdDelete: async (conversationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('deleteConversationApiV1AiConversationConversationIdDelete', 'conversationId', conversationId)
            const localVarPath = `/api/v1/ai/conversation/{conversation_id}`
                .replace(`{${"conversation_id"}}`, encodeURIComponent(String(conversationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate the final skill based on conversation
         * @summary Generate Skill
         * @param {SkillGenerationRequest} skillGenerationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSkillApiV1AiGenerateSkillPost: async (skillGenerationRequest: SkillGenerationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'skillGenerationRequest' is not null or undefined
            assertParamExists('generateSkillApiV1AiGenerateSkillPost', 'skillGenerationRequest', skillGenerationRequest)
            const localVarPath = `/api/v1/ai/generate-skill`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(skillGenerationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get conversation state
         * @summary Get Conversation
         * @param {string} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationApiV1AiConversationConversationIdGet: async (conversationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('getConversationApiV1AiConversationConversationIdGet', 'conversationId', conversationId)
            const localVarPath = `/api/v1/ai/conversation/{conversation_id}`
                .replace(`{${"conversation_id"}}`, encodeURIComponent(String(conversationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Health check endpoint
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiV1AiHealthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/ai/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send a message in the conversation
         * @summary Send Message
         * @param {MessageRequest} messageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessageApiV1AiSendMessagePost: async (messageRequest: MessageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageRequest' is not null or undefined
            assertParamExists('sendMessageApiV1AiSendMessagePost', 'messageRequest', messageRequest)
            const localVarPath = `/api/v1/ai/send-message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start a new AI skill generation conversation
         * @summary Start Conversation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startConversationApiV1AiStartConversationPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/ai/start-conversation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AISkillGeneratorApi - functional programming interface
 * @export
 */
export const AISkillGeneratorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AISkillGeneratorApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a conversation
         * @summary Delete Conversation
         * @param {string} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteConversationApiV1AiConversationConversationIdDelete(conversationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConversationApiV1AiConversationConversationIdDelete(conversationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AISkillGeneratorApi.deleteConversationApiV1AiConversationConversationIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate the final skill based on conversation
         * @summary Generate Skill
         * @param {SkillGenerationRequest} skillGenerationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateSkillApiV1AiGenerateSkillPost(skillGenerationRequest: SkillGenerationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkillGenerationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateSkillApiV1AiGenerateSkillPost(skillGenerationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AISkillGeneratorApi.generateSkillApiV1AiGenerateSkillPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get conversation state
         * @summary Get Conversation
         * @param {string} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConversationApiV1AiConversationConversationIdGet(conversationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationState>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversationApiV1AiConversationConversationIdGet(conversationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AISkillGeneratorApi.getConversationApiV1AiConversationConversationIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Health check endpoint
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckApiV1AiHealthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckApiV1AiHealthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AISkillGeneratorApi.healthCheckApiV1AiHealthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send a message in the conversation
         * @summary Send Message
         * @param {MessageRequest} messageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendMessageApiV1AiSendMessagePost(messageRequest: MessageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendMessageApiV1AiSendMessagePost(messageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AISkillGeneratorApi.sendMessageApiV1AiSendMessagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Start a new AI skill generation conversation
         * @summary Start Conversation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startConversationApiV1AiStartConversationPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startConversationApiV1AiStartConversationPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AISkillGeneratorApi.startConversationApiV1AiStartConversationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AISkillGeneratorApi - factory interface
 * @export
 */
export const AISkillGeneratorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AISkillGeneratorApiFp(configuration)
    return {
        /**
         * Delete a conversation
         * @summary Delete Conversation
         * @param {string} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConversationApiV1AiConversationConversationIdDelete(conversationId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteConversationApiV1AiConversationConversationIdDelete(conversationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate the final skill based on conversation
         * @summary Generate Skill
         * @param {SkillGenerationRequest} skillGenerationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSkillApiV1AiGenerateSkillPost(skillGenerationRequest: SkillGenerationRequest, options?: RawAxiosRequestConfig): AxiosPromise<SkillGenerationResponse> {
            return localVarFp.generateSkillApiV1AiGenerateSkillPost(skillGenerationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get conversation state
         * @summary Get Conversation
         * @param {string} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationApiV1AiConversationConversationIdGet(conversationId: string, options?: RawAxiosRequestConfig): AxiosPromise<ConversationState> {
            return localVarFp.getConversationApiV1AiConversationConversationIdGet(conversationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Health check endpoint
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiV1AiHealthGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.healthCheckApiV1AiHealthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Send a message in the conversation
         * @summary Send Message
         * @param {MessageRequest} messageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessageApiV1AiSendMessagePost(messageRequest: MessageRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConversationResponse> {
            return localVarFp.sendMessageApiV1AiSendMessagePost(messageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Start a new AI skill generation conversation
         * @summary Start Conversation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startConversationApiV1AiStartConversationPost(options?: RawAxiosRequestConfig): AxiosPromise<ConversationResponse> {
            return localVarFp.startConversationApiV1AiStartConversationPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AISkillGeneratorApi - object-oriented interface
 * @export
 * @class AISkillGeneratorApi
 * @extends {BaseAPI}
 */
export class AISkillGeneratorApi extends BaseAPI {
    /**
     * Delete a conversation
     * @summary Delete Conversation
     * @param {string} conversationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AISkillGeneratorApi
     */
    public deleteConversationApiV1AiConversationConversationIdDelete(conversationId: string, options?: RawAxiosRequestConfig) {
        return AISkillGeneratorApiFp(this.configuration).deleteConversationApiV1AiConversationConversationIdDelete(conversationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate the final skill based on conversation
     * @summary Generate Skill
     * @param {SkillGenerationRequest} skillGenerationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AISkillGeneratorApi
     */
    public generateSkillApiV1AiGenerateSkillPost(skillGenerationRequest: SkillGenerationRequest, options?: RawAxiosRequestConfig) {
        return AISkillGeneratorApiFp(this.configuration).generateSkillApiV1AiGenerateSkillPost(skillGenerationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get conversation state
     * @summary Get Conversation
     * @param {string} conversationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AISkillGeneratorApi
     */
    public getConversationApiV1AiConversationConversationIdGet(conversationId: string, options?: RawAxiosRequestConfig) {
        return AISkillGeneratorApiFp(this.configuration).getConversationApiV1AiConversationConversationIdGet(conversationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Health check endpoint
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AISkillGeneratorApi
     */
    public healthCheckApiV1AiHealthGet(options?: RawAxiosRequestConfig) {
        return AISkillGeneratorApiFp(this.configuration).healthCheckApiV1AiHealthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send a message in the conversation
     * @summary Send Message
     * @param {MessageRequest} messageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AISkillGeneratorApi
     */
    public sendMessageApiV1AiSendMessagePost(messageRequest: MessageRequest, options?: RawAxiosRequestConfig) {
        return AISkillGeneratorApiFp(this.configuration).sendMessageApiV1AiSendMessagePost(messageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Start a new AI skill generation conversation
     * @summary Start Conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AISkillGeneratorApi
     */
    public startConversationApiV1AiStartConversationPost(options?: RawAxiosRequestConfig) {
        return AISkillGeneratorApiFp(this.configuration).startConversationApiV1AiStartConversationPost(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Db Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbTestApiV1DbTestGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/db-test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiV1HealthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRootApiV1Get: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Db Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dbTestApiV1DbTestGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dbTestApiV1DbTestGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.dbTestApiV1DbTestGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckApiV1HealthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckApiV1HealthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.healthCheckApiV1HealthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readRootApiV1Get(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readRootApiV1Get(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readRootApiV1Get']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Db Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbTestApiV1DbTestGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.dbTestApiV1DbTestGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiV1HealthGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.healthCheckApiV1HealthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRootApiV1Get(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.readRootApiV1Get(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Db Test
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public dbTestApiV1DbTestGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).dbTestApiV1DbTestGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthCheckApiV1HealthGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthCheckApiV1HealthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readRootApiV1Get(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readRootApiV1Get(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GamificationApi - axios parameter creator
 * @export
 */
export const GamificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add points to user and record in history.
         * @summary Add Points
         * @param {string} userId 
         * @param {number} points 
         * @param {PointsReason} reason 
         * @param {string | null} [referenceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPointsApiV1GamificationPointsUserIdAddPost: async (userId: string, points: number, reason: PointsReason, referenceId?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addPointsApiV1GamificationPointsUserIdAddPost', 'userId', userId)
            // verify required parameter 'points' is not null or undefined
            assertParamExists('addPointsApiV1GamificationPointsUserIdAddPost', 'points', points)
            // verify required parameter 'reason' is not null or undefined
            assertParamExists('addPointsApiV1GamificationPointsUserIdAddPost', 'reason', reason)
            const localVarPath = `/api/v1/gamification/points/{user_id}/add`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (points !== undefined) {
                localVarQueryParameter['points'] = points;
            }

            if (reason !== undefined) {
                localVarQueryParameter['reason'] = reason;
            }

            if (referenceId !== undefined) {
                localVarQueryParameter['reference_id'] = referenceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Handle daily login - award points and update streak in one operation.
         * @summary Daily Login
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dailyLoginApiV1GamificationDailyLoginUserIdPost: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('dailyLoginApiV1GamificationDailyLoginUserIdPost', 'userId', userId)
            const localVarPath = `/api/v1/gamification/daily-login/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get comprehensive gamification summary for user.
         * @summary Get Gamification Summary
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGamificationSummaryApiV1GamificationSummaryUserIdGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getGamificationSummaryApiV1GamificationSummaryUserIdGet', 'userId', userId)
            const localVarPath = `/api/v1/gamification/summary/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all level configurations.
         * @summary Get Levels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLevelsApiV1GamificationLevelsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gamification/levels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user\'s achievements with progress.
         * @summary Get User Achievements
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAchievementsApiV1GamificationAchievementsUserIdGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserAchievementsApiV1GamificationAchievementsUserIdGet', 'userId', userId)
            const localVarPath = `/api/v1/gamification/achievements/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user\'s gamification statistics.
         * @summary Get User Stats
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserStatsApiV1GamificationStatsUserIdGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserStatsApiV1GamificationStatsUserIdGet', 'userId', userId)
            const localVarPath = `/api/v1/gamification/stats/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark an achievement as seen by the user.
         * @summary Mark Achievement Seen
         * @param {string} userId 
         * @param {string} achievementId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAchievementSeenApiV1GamificationAchievementsUserIdAchievementIdMarkSeenPost: async (userId: string, achievementId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('markAchievementSeenApiV1GamificationAchievementsUserIdAchievementIdMarkSeenPost', 'userId', userId)
            // verify required parameter 'achievementId' is not null or undefined
            assertParamExists('markAchievementSeenApiV1GamificationAchievementsUserIdAchievementIdMarkSeenPost', 'achievementId', achievementId)
            const localVarPath = `/api/v1/gamification/achievements/{user_id}/{achievement_id}/mark-seen`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"achievement_id"}}`, encodeURIComponent(String(achievementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update user statistics.
         * @summary Update User Stats
         * @param {string} userId 
         * @param {UserStatsUpdate} userStatsUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserStatsApiV1GamificationStatsUserIdUpdatePost: async (userId: string, userStatsUpdate: UserStatsUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUserStatsApiV1GamificationStatsUserIdUpdatePost', 'userId', userId)
            // verify required parameter 'userStatsUpdate' is not null or undefined
            assertParamExists('updateUserStatsApiV1GamificationStatsUserIdUpdatePost', 'userStatsUpdate', userStatsUpdate)
            const localVarPath = `/api/v1/gamification/stats/{user_id}/update`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userStatsUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GamificationApi - functional programming interface
 * @export
 */
export const GamificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GamificationApiAxiosParamCreator(configuration)
    return {
        /**
         * Add points to user and record in history.
         * @summary Add Points
         * @param {string} userId 
         * @param {number} points 
         * @param {PointsReason} reason 
         * @param {string | null} [referenceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPointsApiV1GamificationPointsUserIdAddPost(userId: string, points: number, reason: PointsReason, referenceId?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPointsApiV1GamificationPointsUserIdAddPost(userId, points, reason, referenceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamificationApi.addPointsApiV1GamificationPointsUserIdAddPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Handle daily login - award points and update streak in one operation.
         * @summary Daily Login
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dailyLoginApiV1GamificationDailyLoginUserIdPost(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dailyLoginApiV1GamificationDailyLoginUserIdPost(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamificationApi.dailyLoginApiV1GamificationDailyLoginUserIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get comprehensive gamification summary for user.
         * @summary Get Gamification Summary
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGamificationSummaryApiV1GamificationSummaryUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GamificationSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGamificationSummaryApiV1GamificationSummaryUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamificationApi.getGamificationSummaryApiV1GamificationSummaryUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all level configurations.
         * @summary Get Levels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLevelsApiV1GamificationLevelsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LevelConfig>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLevelsApiV1GamificationLevelsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamificationApi.getLevelsApiV1GamificationLevelsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get user\'s achievements with progress.
         * @summary Get User Achievements
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAchievementsApiV1GamificationAchievementsUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserAchievementsApiV1GamificationAchievementsUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamificationApi.getUserAchievementsApiV1GamificationAchievementsUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get user\'s gamification statistics.
         * @summary Get User Stats
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserStatsApiV1GamificationStatsUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserStatsApiV1GamificationStatsUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamificationApi.getUserStatsApiV1GamificationStatsUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Mark an achievement as seen by the user.
         * @summary Mark Achievement Seen
         * @param {string} userId 
         * @param {string} achievementId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markAchievementSeenApiV1GamificationAchievementsUserIdAchievementIdMarkSeenPost(userId: string, achievementId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markAchievementSeenApiV1GamificationAchievementsUserIdAchievementIdMarkSeenPost(userId, achievementId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamificationApi.markAchievementSeenApiV1GamificationAchievementsUserIdAchievementIdMarkSeenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update user statistics.
         * @summary Update User Stats
         * @param {string} userId 
         * @param {UserStatsUpdate} userStatsUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserStatsApiV1GamificationStatsUserIdUpdatePost(userId: string, userStatsUpdate: UserStatsUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserStatsApiV1GamificationStatsUserIdUpdatePost(userId, userStatsUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamificationApi.updateUserStatsApiV1GamificationStatsUserIdUpdatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GamificationApi - factory interface
 * @export
 */
export const GamificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GamificationApiFp(configuration)
    return {
        /**
         * Add points to user and record in history.
         * @summary Add Points
         * @param {string} userId 
         * @param {number} points 
         * @param {PointsReason} reason 
         * @param {string | null} [referenceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPointsApiV1GamificationPointsUserIdAddPost(userId: string, points: number, reason: PointsReason, referenceId?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.addPointsApiV1GamificationPointsUserIdAddPost(userId, points, reason, referenceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Handle daily login - award points and update streak in one operation.
         * @summary Daily Login
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dailyLoginApiV1GamificationDailyLoginUserIdPost(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.dailyLoginApiV1GamificationDailyLoginUserIdPost(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get comprehensive gamification summary for user.
         * @summary Get Gamification Summary
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGamificationSummaryApiV1GamificationSummaryUserIdGet(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<GamificationSummary> {
            return localVarFp.getGamificationSummaryApiV1GamificationSummaryUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all level configurations.
         * @summary Get Levels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLevelsApiV1GamificationLevelsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<LevelConfig>> {
            return localVarFp.getLevelsApiV1GamificationLevelsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get user\'s achievements with progress.
         * @summary Get User Achievements
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAchievementsApiV1GamificationAchievementsUserIdGet(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getUserAchievementsApiV1GamificationAchievementsUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user\'s gamification statistics.
         * @summary Get User Stats
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserStatsApiV1GamificationStatsUserIdGet(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<UserStatsResponse> {
            return localVarFp.getUserStatsApiV1GamificationStatsUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Mark an achievement as seen by the user.
         * @summary Mark Achievement Seen
         * @param {string} userId 
         * @param {string} achievementId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAchievementSeenApiV1GamificationAchievementsUserIdAchievementIdMarkSeenPost(userId: string, achievementId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.markAchievementSeenApiV1GamificationAchievementsUserIdAchievementIdMarkSeenPost(userId, achievementId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update user statistics.
         * @summary Update User Stats
         * @param {string} userId 
         * @param {UserStatsUpdate} userStatsUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserStatsApiV1GamificationStatsUserIdUpdatePost(userId: string, userStatsUpdate: UserStatsUpdate, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.updateUserStatsApiV1GamificationStatsUserIdUpdatePost(userId, userStatsUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GamificationApi - object-oriented interface
 * @export
 * @class GamificationApi
 * @extends {BaseAPI}
 */
export class GamificationApi extends BaseAPI {
    /**
     * Add points to user and record in history.
     * @summary Add Points
     * @param {string} userId 
     * @param {number} points 
     * @param {PointsReason} reason 
     * @param {string | null} [referenceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamificationApi
     */
    public addPointsApiV1GamificationPointsUserIdAddPost(userId: string, points: number, reason: PointsReason, referenceId?: string | null, options?: RawAxiosRequestConfig) {
        return GamificationApiFp(this.configuration).addPointsApiV1GamificationPointsUserIdAddPost(userId, points, reason, referenceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Handle daily login - award points and update streak in one operation.
     * @summary Daily Login
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamificationApi
     */
    public dailyLoginApiV1GamificationDailyLoginUserIdPost(userId: string, options?: RawAxiosRequestConfig) {
        return GamificationApiFp(this.configuration).dailyLoginApiV1GamificationDailyLoginUserIdPost(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get comprehensive gamification summary for user.
     * @summary Get Gamification Summary
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamificationApi
     */
    public getGamificationSummaryApiV1GamificationSummaryUserIdGet(userId: string, options?: RawAxiosRequestConfig) {
        return GamificationApiFp(this.configuration).getGamificationSummaryApiV1GamificationSummaryUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all level configurations.
     * @summary Get Levels
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamificationApi
     */
    public getLevelsApiV1GamificationLevelsGet(options?: RawAxiosRequestConfig) {
        return GamificationApiFp(this.configuration).getLevelsApiV1GamificationLevelsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user\'s achievements with progress.
     * @summary Get User Achievements
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamificationApi
     */
    public getUserAchievementsApiV1GamificationAchievementsUserIdGet(userId: string, options?: RawAxiosRequestConfig) {
        return GamificationApiFp(this.configuration).getUserAchievementsApiV1GamificationAchievementsUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user\'s gamification statistics.
     * @summary Get User Stats
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamificationApi
     */
    public getUserStatsApiV1GamificationStatsUserIdGet(userId: string, options?: RawAxiosRequestConfig) {
        return GamificationApiFp(this.configuration).getUserStatsApiV1GamificationStatsUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mark an achievement as seen by the user.
     * @summary Mark Achievement Seen
     * @param {string} userId 
     * @param {string} achievementId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamificationApi
     */
    public markAchievementSeenApiV1GamificationAchievementsUserIdAchievementIdMarkSeenPost(userId: string, achievementId: string, options?: RawAxiosRequestConfig) {
        return GamificationApiFp(this.configuration).markAchievementSeenApiV1GamificationAchievementsUserIdAchievementIdMarkSeenPost(userId, achievementId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update user statistics.
     * @summary Update User Stats
     * @param {string} userId 
     * @param {UserStatsUpdate} userStatsUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamificationApi
     */
    public updateUserStatsApiV1GamificationStatsUserIdUpdatePost(userId: string, userStatsUpdate: UserStatsUpdate, options?: RawAxiosRequestConfig) {
        return GamificationApiFp(this.configuration).updateUserStatsApiV1GamificationStatsUserIdUpdatePost(userId, userStatsUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TodosApi - axios parameter creator
 * @export
 */
export const TodosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new todo list
         * @summary Create Todo
         * @param {Todo} todo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTodoApiV1TodosPost: async (todo: Todo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todo' is not null or undefined
            assertParamExists('createTodoApiV1TodosPost', 'todo', todo)
            const localVarPath = `/api/v1/todos/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(todo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a todo list by ID
         * @summary Delete Todo
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodoApiV1TodosTodoIdDelete: async (todoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('deleteTodoApiV1TodosTodoIdDelete', 'todoId', todoId)
            const localVarPath = `/api/v1/todos/{todo_id}`
                .replace(`{${"todo_id"}}`, encodeURIComponent(String(todoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific todo list by ID
         * @summary Get Todo
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoApiV1TodosTodoIdGet: async (todoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('getTodoApiV1TodosTodoIdGet', 'todoId', todoId)
            const localVarPath = `/api/v1/todos/{todo_id}`
                .replace(`{${"todo_id"}}`, encodeURIComponent(String(todoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all todo lists with pagination
         * @summary Get Todos
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodosApiV1TodosGet: async (skip?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/todos/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially update a todo list by ID - only update the fields that are provided
         * @summary Partial Update Todo
         * @param {string} todoId 
         * @param {TodoPatch} todoPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateTodoApiV1TodosTodoIdPatch: async (todoId: string, todoPatch: TodoPatch, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('partialUpdateTodoApiV1TodosTodoIdPatch', 'todoId', todoId)
            // verify required parameter 'todoPatch' is not null or undefined
            assertParamExists('partialUpdateTodoApiV1TodosTodoIdPatch', 'todoPatch', todoPatch)
            const localVarPath = `/api/v1/todos/{todo_id}`
                .replace(`{${"todo_id"}}`, encodeURIComponent(String(todoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(todoPatch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a todo list by ID
         * @summary Update Todo
         * @param {string} todoId 
         * @param {Todo} todo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTodoApiV1TodosTodoIdPut: async (todoId: string, todo: Todo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('updateTodoApiV1TodosTodoIdPut', 'todoId', todoId)
            // verify required parameter 'todo' is not null or undefined
            assertParamExists('updateTodoApiV1TodosTodoIdPut', 'todo', todo)
            const localVarPath = `/api/v1/todos/{todo_id}`
                .replace(`{${"todo_id"}}`, encodeURIComponent(String(todoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(todo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific todo item within a todo list
         * @summary Update Todo Item
         * @param {string} todoId 
         * @param {string} itemId 
         * @param {TodoItemPatch} todoItemPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTodoItemApiV1TodosTodoIdItemsItemIdPatch: async (todoId: string, itemId: string, todoItemPatch: TodoItemPatch, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('updateTodoItemApiV1TodosTodoIdItemsItemIdPatch', 'todoId', todoId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('updateTodoItemApiV1TodosTodoIdItemsItemIdPatch', 'itemId', itemId)
            // verify required parameter 'todoItemPatch' is not null or undefined
            assertParamExists('updateTodoItemApiV1TodosTodoIdItemsItemIdPatch', 'todoItemPatch', todoItemPatch)
            const localVarPath = `/api/v1/todos/{todo_id}/items/{item_id}`
                .replace(`{${"todo_id"}}`, encodeURIComponent(String(todoId)))
                .replace(`{${"item_id"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(todoItemPatch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TodosApi - functional programming interface
 * @export
 */
export const TodosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TodosApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new todo list
         * @summary Create Todo
         * @param {Todo} todo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTodoApiV1TodosPost(todo: Todo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTodoApiV1TodosPost(todo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodosApi.createTodoApiV1TodosPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a todo list by ID
         * @summary Delete Todo
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTodoApiV1TodosTodoIdDelete(todoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTodoApiV1TodosTodoIdDelete(todoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodosApi.deleteTodoApiV1TodosTodoIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific todo list by ID
         * @summary Get Todo
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTodoApiV1TodosTodoIdGet(todoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTodoApiV1TodosTodoIdGet(todoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodosApi.getTodoApiV1TodosTodoIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all todo lists with pagination
         * @summary Get Todos
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTodosApiV1TodosGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Todo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTodosApiV1TodosGet(skip, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodosApi.getTodosApiV1TodosGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Partially update a todo list by ID - only update the fields that are provided
         * @summary Partial Update Todo
         * @param {string} todoId 
         * @param {TodoPatch} todoPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateTodoApiV1TodosTodoIdPatch(todoId: string, todoPatch: TodoPatch, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateTodoApiV1TodosTodoIdPatch(todoId, todoPatch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodosApi.partialUpdateTodoApiV1TodosTodoIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a todo list by ID
         * @summary Update Todo
         * @param {string} todoId 
         * @param {Todo} todo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTodoApiV1TodosTodoIdPut(todoId: string, todo: Todo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTodoApiV1TodosTodoIdPut(todoId, todo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodosApi.updateTodoApiV1TodosTodoIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a specific todo item within a todo list
         * @summary Update Todo Item
         * @param {string} todoId 
         * @param {string} itemId 
         * @param {TodoItemPatch} todoItemPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTodoItemApiV1TodosTodoIdItemsItemIdPatch(todoId: string, itemId: string, todoItemPatch: TodoItemPatch, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTodoItemApiV1TodosTodoIdItemsItemIdPatch(todoId, itemId, todoItemPatch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodosApi.updateTodoItemApiV1TodosTodoIdItemsItemIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TodosApi - factory interface
 * @export
 */
export const TodosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TodosApiFp(configuration)
    return {
        /**
         * Create a new todo list
         * @summary Create Todo
         * @param {Todo} todo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTodoApiV1TodosPost(todo: Todo, options?: RawAxiosRequestConfig): AxiosPromise<Todo> {
            return localVarFp.createTodoApiV1TodosPost(todo, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a todo list by ID
         * @summary Delete Todo
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodoApiV1TodosTodoIdDelete(todoId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTodoApiV1TodosTodoIdDelete(todoId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific todo list by ID
         * @summary Get Todo
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoApiV1TodosTodoIdGet(todoId: string, options?: RawAxiosRequestConfig): AxiosPromise<Todo> {
            return localVarFp.getTodoApiV1TodosTodoIdGet(todoId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all todo lists with pagination
         * @summary Get Todos
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodosApiV1TodosGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Todo>> {
            return localVarFp.getTodosApiV1TodosGet(skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially update a todo list by ID - only update the fields that are provided
         * @summary Partial Update Todo
         * @param {string} todoId 
         * @param {TodoPatch} todoPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateTodoApiV1TodosTodoIdPatch(todoId: string, todoPatch: TodoPatch, options?: RawAxiosRequestConfig): AxiosPromise<Todo> {
            return localVarFp.partialUpdateTodoApiV1TodosTodoIdPatch(todoId, todoPatch, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a todo list by ID
         * @summary Update Todo
         * @param {string} todoId 
         * @param {Todo} todo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTodoApiV1TodosTodoIdPut(todoId: string, todo: Todo, options?: RawAxiosRequestConfig): AxiosPromise<Todo> {
            return localVarFp.updateTodoApiV1TodosTodoIdPut(todoId, todo, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific todo item within a todo list
         * @summary Update Todo Item
         * @param {string} todoId 
         * @param {string} itemId 
         * @param {TodoItemPatch} todoItemPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTodoItemApiV1TodosTodoIdItemsItemIdPatch(todoId: string, itemId: string, todoItemPatch: TodoItemPatch, options?: RawAxiosRequestConfig): AxiosPromise<Todo> {
            return localVarFp.updateTodoItemApiV1TodosTodoIdItemsItemIdPatch(todoId, itemId, todoItemPatch, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TodosApi - object-oriented interface
 * @export
 * @class TodosApi
 * @extends {BaseAPI}
 */
export class TodosApi extends BaseAPI {
    /**
     * Create a new todo list
     * @summary Create Todo
     * @param {Todo} todo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public createTodoApiV1TodosPost(todo: Todo, options?: RawAxiosRequestConfig) {
        return TodosApiFp(this.configuration).createTodoApiV1TodosPost(todo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a todo list by ID
     * @summary Delete Todo
     * @param {string} todoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public deleteTodoApiV1TodosTodoIdDelete(todoId: string, options?: RawAxiosRequestConfig) {
        return TodosApiFp(this.configuration).deleteTodoApiV1TodosTodoIdDelete(todoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific todo list by ID
     * @summary Get Todo
     * @param {string} todoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public getTodoApiV1TodosTodoIdGet(todoId: string, options?: RawAxiosRequestConfig) {
        return TodosApiFp(this.configuration).getTodoApiV1TodosTodoIdGet(todoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all todo lists with pagination
     * @summary Get Todos
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public getTodosApiV1TodosGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return TodosApiFp(this.configuration).getTodosApiV1TodosGet(skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially update a todo list by ID - only update the fields that are provided
     * @summary Partial Update Todo
     * @param {string} todoId 
     * @param {TodoPatch} todoPatch 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public partialUpdateTodoApiV1TodosTodoIdPatch(todoId: string, todoPatch: TodoPatch, options?: RawAxiosRequestConfig) {
        return TodosApiFp(this.configuration).partialUpdateTodoApiV1TodosTodoIdPatch(todoId, todoPatch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a todo list by ID
     * @summary Update Todo
     * @param {string} todoId 
     * @param {Todo} todo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public updateTodoApiV1TodosTodoIdPut(todoId: string, todo: Todo, options?: RawAxiosRequestConfig) {
        return TodosApiFp(this.configuration).updateTodoApiV1TodosTodoIdPut(todoId, todo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific todo item within a todo list
     * @summary Update Todo Item
     * @param {string} todoId 
     * @param {string} itemId 
     * @param {TodoItemPatch} todoItemPatch 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public updateTodoItemApiV1TodosTodoIdItemsItemIdPatch(todoId: string, itemId: string, todoItemPatch: TodoItemPatch, options?: RawAxiosRequestConfig) {
        return TodosApiFp(this.configuration).updateTodoItemApiV1TodosTodoIdItemsItemIdPatch(todoId, itemId, todoItemPatch, options).then((request) => request(this.axios, this.basePath));
    }
}



